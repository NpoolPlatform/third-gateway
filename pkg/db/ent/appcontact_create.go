// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/appcontact"
	"github.com/google/uuid"
)

// AppContactCreate is the builder for creating a AppContact entity.
type AppContactCreate struct {
	config
	mutation *AppContactMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (acc *AppContactCreate) SetAppID(u uuid.UUID) *AppContactCreate {
	acc.mutation.SetAppID(u)
	return acc
}

// SetUsedFor sets the "used_for" field.
func (acc *AppContactCreate) SetUsedFor(s string) *AppContactCreate {
	acc.mutation.SetUsedFor(s)
	return acc
}

// SetSender sets the "sender" field.
func (acc *AppContactCreate) SetSender(s string) *AppContactCreate {
	acc.mutation.SetSender(s)
	return acc
}

// SetAccount sets the "account" field.
func (acc *AppContactCreate) SetAccount(s string) *AppContactCreate {
	acc.mutation.SetAccount(s)
	return acc
}

// SetAccountType sets the "account_type" field.
func (acc *AppContactCreate) SetAccountType(s string) *AppContactCreate {
	acc.mutation.SetAccountType(s)
	return acc
}

// SetCreateAt sets the "create_at" field.
func (acc *AppContactCreate) SetCreateAt(u uint32) *AppContactCreate {
	acc.mutation.SetCreateAt(u)
	return acc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (acc *AppContactCreate) SetNillableCreateAt(u *uint32) *AppContactCreate {
	if u != nil {
		acc.SetCreateAt(*u)
	}
	return acc
}

// SetUpdateAt sets the "update_at" field.
func (acc *AppContactCreate) SetUpdateAt(u uint32) *AppContactCreate {
	acc.mutation.SetUpdateAt(u)
	return acc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (acc *AppContactCreate) SetNillableUpdateAt(u *uint32) *AppContactCreate {
	if u != nil {
		acc.SetUpdateAt(*u)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppContactCreate) SetID(u uuid.UUID) *AppContactCreate {
	acc.mutation.SetID(u)
	return acc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (acc *AppContactCreate) SetNillableID(u *uuid.UUID) *AppContactCreate {
	if u != nil {
		acc.SetID(*u)
	}
	return acc
}

// Mutation returns the AppContactMutation object of the builder.
func (acc *AppContactCreate) Mutation() *AppContactMutation {
	return acc.mutation
}

// Save creates the AppContact in the database.
func (acc *AppContactCreate) Save(ctx context.Context) (*AppContact, error) {
	var (
		err  error
		node *AppContact
	)
	acc.defaults()
	if len(acc.hooks) == 0 {
		if err = acc.check(); err != nil {
			return nil, err
		}
		node, err = acc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppContactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = acc.check(); err != nil {
				return nil, err
			}
			acc.mutation = mutation
			if node, err = acc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(acc.hooks) - 1; i >= 0; i-- {
			if acc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = acc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, acc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppContactCreate) SaveX(ctx context.Context) *AppContact {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppContactCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppContactCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppContactCreate) defaults() {
	if _, ok := acc.mutation.CreateAt(); !ok {
		v := appcontact.DefaultCreateAt()
		acc.mutation.SetCreateAt(v)
	}
	if _, ok := acc.mutation.UpdateAt(); !ok {
		v := appcontact.DefaultUpdateAt()
		acc.mutation.SetUpdateAt(v)
	}
	if _, ok := acc.mutation.ID(); !ok {
		v := appcontact.DefaultID()
		acc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppContactCreate) check() error {
	if _, ok := acc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppContact.app_id"`)}
	}
	if _, ok := acc.mutation.UsedFor(); !ok {
		return &ValidationError{Name: "used_for", err: errors.New(`ent: missing required field "AppContact.used_for"`)}
	}
	if v, ok := acc.mutation.UsedFor(); ok {
		if err := appcontact.UsedForValidator(v); err != nil {
			return &ValidationError{Name: "used_for", err: fmt.Errorf(`ent: validator failed for field "AppContact.used_for": %w`, err)}
		}
	}
	if _, ok := acc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "AppContact.sender"`)}
	}
	if _, ok := acc.mutation.Account(); !ok {
		return &ValidationError{Name: "account", err: errors.New(`ent: missing required field "AppContact.account"`)}
	}
	if _, ok := acc.mutation.AccountType(); !ok {
		return &ValidationError{Name: "account_type", err: errors.New(`ent: missing required field "AppContact.account_type"`)}
	}
	if _, ok := acc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppContact.create_at"`)}
	}
	if _, ok := acc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppContact.update_at"`)}
	}
	return nil
}

func (acc *AppContactCreate) sqlSave(ctx context.Context) (*AppContact, error) {
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (acc *AppContactCreate) createSpec() (*AppContact, *sqlgraph.CreateSpec) {
	var (
		_node = &AppContact{config: acc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appcontact.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appcontact.FieldID,
			},
		}
	)
	_spec.OnConflict = acc.conflict
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := acc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appcontact.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := acc.mutation.UsedFor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcontact.FieldUsedFor,
		})
		_node.UsedFor = value
	}
	if value, ok := acc.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcontact.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := acc.mutation.Account(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcontact.FieldAccount,
		})
		_node.Account = value
	}
	if value, ok := acc.mutation.AccountType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appcontact.FieldAccountType,
		})
		_node.AccountType = value
	}
	if value, ok := acc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcontact.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := acc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appcontact.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppContact.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppContactUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (acc *AppContactCreate) OnConflict(opts ...sql.ConflictOption) *AppContactUpsertOne {
	acc.conflict = opts
	return &AppContactUpsertOne{
		create: acc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (acc *AppContactCreate) OnConflictColumns(columns ...string) *AppContactUpsertOne {
	acc.conflict = append(acc.conflict, sql.ConflictColumns(columns...))
	return &AppContactUpsertOne{
		create: acc,
	}
}

type (
	// AppContactUpsertOne is the builder for "upsert"-ing
	//  one AppContact node.
	AppContactUpsertOne struct {
		create *AppContactCreate
	}

	// AppContactUpsert is the "OnConflict" setter.
	AppContactUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppContactUpsert) SetAppID(v uuid.UUID) *AppContactUpsert {
	u.Set(appcontact.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateAppID() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldAppID)
	return u
}

// SetUsedFor sets the "used_for" field.
func (u *AppContactUpsert) SetUsedFor(v string) *AppContactUpsert {
	u.Set(appcontact.FieldUsedFor, v)
	return u
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateUsedFor() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldUsedFor)
	return u
}

// SetSender sets the "sender" field.
func (u *AppContactUpsert) SetSender(v string) *AppContactUpsert {
	u.Set(appcontact.FieldSender, v)
	return u
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateSender() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldSender)
	return u
}

// SetAccount sets the "account" field.
func (u *AppContactUpsert) SetAccount(v string) *AppContactUpsert {
	u.Set(appcontact.FieldAccount, v)
	return u
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateAccount() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldAccount)
	return u
}

// SetAccountType sets the "account_type" field.
func (u *AppContactUpsert) SetAccountType(v string) *AppContactUpsert {
	u.Set(appcontact.FieldAccountType, v)
	return u
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateAccountType() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldAccountType)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppContactUpsert) SetCreateAt(v uint32) *AppContactUpsert {
	u.Set(appcontact.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateCreateAt() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppContactUpsert) AddCreateAt(v uint32) *AppContactUpsert {
	u.Add(appcontact.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppContactUpsert) SetUpdateAt(v uint32) *AppContactUpsert {
	u.Set(appcontact.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppContactUpsert) UpdateUpdateAt() *AppContactUpsert {
	u.SetExcluded(appcontact.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppContactUpsert) AddUpdateAt(v uint32) *AppContactUpsert {
	u.Add(appcontact.FieldUpdateAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcontact.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppContactUpsertOne) UpdateNewValues() *AppContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appcontact.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppContact.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppContactUpsertOne) Ignore() *AppContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppContactUpsertOne) DoNothing() *AppContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppContactCreate.OnConflict
// documentation for more info.
func (u *AppContactUpsertOne) Update(set func(*AppContactUpsert)) *AppContactUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppContactUpsertOne) SetAppID(v uuid.UUID) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateAppID() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateAppID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *AppContactUpsertOne) SetUsedFor(v string) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateUsedFor() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSender sets the "sender" field.
func (u *AppContactUpsertOne) SetSender(v string) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateSender() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateSender()
	})
}

// SetAccount sets the "account" field.
func (u *AppContactUpsertOne) SetAccount(v string) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetAccount(v)
	})
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateAccount() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateAccount()
	})
}

// SetAccountType sets the "account_type" field.
func (u *AppContactUpsertOne) SetAccountType(v string) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateAccountType() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateAccountType()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppContactUpsertOne) SetCreateAt(v uint32) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppContactUpsertOne) AddCreateAt(v uint32) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateCreateAt() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppContactUpsertOne) SetUpdateAt(v uint32) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppContactUpsertOne) AddUpdateAt(v uint32) *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppContactUpsertOne) UpdateUpdateAt() *AppContactUpsertOne {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *AppContactUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppContactCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppContactUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppContactUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppContactUpsertOne.ID is not supported by MySQL driver. Use AppContactUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppContactUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppContactCreateBulk is the builder for creating many AppContact entities in bulk.
type AppContactCreateBulk struct {
	config
	builders []*AppContactCreate
	conflict []sql.ConflictOption
}

// Save creates the AppContact entities in the database.
func (accb *AppContactCreateBulk) Save(ctx context.Context) ([]*AppContact, error) {
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppContact, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = accb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppContactCreateBulk) SaveX(ctx context.Context) []*AppContact {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppContactCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppContactCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppContact.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppContactUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (accb *AppContactCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppContactUpsertBulk {
	accb.conflict = opts
	return &AppContactUpsertBulk{
		create: accb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppContact.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (accb *AppContactCreateBulk) OnConflictColumns(columns ...string) *AppContactUpsertBulk {
	accb.conflict = append(accb.conflict, sql.ConflictColumns(columns...))
	return &AppContactUpsertBulk{
		create: accb,
	}
}

// AppContactUpsertBulk is the builder for "upsert"-ing
// a bulk of AppContact nodes.
type AppContactUpsertBulk struct {
	create *AppContactCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppContact.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appcontact.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppContactUpsertBulk) UpdateNewValues() *AppContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appcontact.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppContact.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppContactUpsertBulk) Ignore() *AppContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppContactUpsertBulk) DoNothing() *AppContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppContactCreateBulk.OnConflict
// documentation for more info.
func (u *AppContactUpsertBulk) Update(set func(*AppContactUpsert)) *AppContactUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppContactUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppContactUpsertBulk) SetAppID(v uuid.UUID) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateAppID() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateAppID()
	})
}

// SetUsedFor sets the "used_for" field.
func (u *AppContactUpsertBulk) SetUsedFor(v string) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetUsedFor(v)
	})
}

// UpdateUsedFor sets the "used_for" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateUsedFor() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateUsedFor()
	})
}

// SetSender sets the "sender" field.
func (u *AppContactUpsertBulk) SetSender(v string) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateSender() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateSender()
	})
}

// SetAccount sets the "account" field.
func (u *AppContactUpsertBulk) SetAccount(v string) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetAccount(v)
	})
}

// UpdateAccount sets the "account" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateAccount() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateAccount()
	})
}

// SetAccountType sets the "account_type" field.
func (u *AppContactUpsertBulk) SetAccountType(v string) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetAccountType(v)
	})
}

// UpdateAccountType sets the "account_type" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateAccountType() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateAccountType()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppContactUpsertBulk) SetCreateAt(v uint32) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppContactUpsertBulk) AddCreateAt(v uint32) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateCreateAt() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppContactUpsertBulk) SetUpdateAt(v uint32) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppContactUpsertBulk) AddUpdateAt(v uint32) *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppContactUpsertBulk) UpdateUpdateAt() *AppContactUpsertBulk {
	return u.Update(func(s *AppContactUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *AppContactUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppContactCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppContactCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppContactUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
