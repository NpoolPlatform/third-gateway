// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/appemailtemplate"
	"github.com/google/uuid"
)

// AppEmailTemplateCreate is the builder for creating a AppEmailTemplate entity.
type AppEmailTemplateCreate struct {
	config
	mutation *AppEmailTemplateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (aetc *AppEmailTemplateCreate) SetAppID(u uuid.UUID) *AppEmailTemplateCreate {
	aetc.mutation.SetAppID(u)
	return aetc
}

// SetLangID sets the "lang_id" field.
func (aetc *AppEmailTemplateCreate) SetLangID(u uuid.UUID) *AppEmailTemplateCreate {
	aetc.mutation.SetLangID(u)
	return aetc
}

// SetSender sets the "sender" field.
func (aetc *AppEmailTemplateCreate) SetSender(s string) *AppEmailTemplateCreate {
	aetc.mutation.SetSender(s)
	return aetc
}

// SetReplyTo sets the "reply_to" field.
func (aetc *AppEmailTemplateCreate) SetReplyTo(s string) *AppEmailTemplateCreate {
	aetc.mutation.SetReplyTo(s)
	return aetc
}

// SetCcTo sets the "cc_to" field.
func (aetc *AppEmailTemplateCreate) SetCcTo(s string) *AppEmailTemplateCreate {
	aetc.mutation.SetCcTo(s)
	return aetc
}

// SetSubject sets the "subject" field.
func (aetc *AppEmailTemplateCreate) SetSubject(s string) *AppEmailTemplateCreate {
	aetc.mutation.SetSubject(s)
	return aetc
}

// SetBody sets the "body" field.
func (aetc *AppEmailTemplateCreate) SetBody(s string) *AppEmailTemplateCreate {
	aetc.mutation.SetBody(s)
	return aetc
}

// SetCreateAt sets the "create_at" field.
func (aetc *AppEmailTemplateCreate) SetCreateAt(u uint32) *AppEmailTemplateCreate {
	aetc.mutation.SetCreateAt(u)
	return aetc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (aetc *AppEmailTemplateCreate) SetNillableCreateAt(u *uint32) *AppEmailTemplateCreate {
	if u != nil {
		aetc.SetCreateAt(*u)
	}
	return aetc
}

// SetUpdateAt sets the "update_at" field.
func (aetc *AppEmailTemplateCreate) SetUpdateAt(u uint32) *AppEmailTemplateCreate {
	aetc.mutation.SetUpdateAt(u)
	return aetc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (aetc *AppEmailTemplateCreate) SetNillableUpdateAt(u *uint32) *AppEmailTemplateCreate {
	if u != nil {
		aetc.SetUpdateAt(*u)
	}
	return aetc
}

// SetID sets the "id" field.
func (aetc *AppEmailTemplateCreate) SetID(u uuid.UUID) *AppEmailTemplateCreate {
	aetc.mutation.SetID(u)
	return aetc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (aetc *AppEmailTemplateCreate) SetNillableID(u *uuid.UUID) *AppEmailTemplateCreate {
	if u != nil {
		aetc.SetID(*u)
	}
	return aetc
}

// Mutation returns the AppEmailTemplateMutation object of the builder.
func (aetc *AppEmailTemplateCreate) Mutation() *AppEmailTemplateMutation {
	return aetc.mutation
}

// Save creates the AppEmailTemplate in the database.
func (aetc *AppEmailTemplateCreate) Save(ctx context.Context) (*AppEmailTemplate, error) {
	var (
		err  error
		node *AppEmailTemplate
	)
	aetc.defaults()
	if len(aetc.hooks) == 0 {
		if err = aetc.check(); err != nil {
			return nil, err
		}
		node, err = aetc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppEmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aetc.check(); err != nil {
				return nil, err
			}
			aetc.mutation = mutation
			if node, err = aetc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(aetc.hooks) - 1; i >= 0; i-- {
			if aetc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aetc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aetc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (aetc *AppEmailTemplateCreate) SaveX(ctx context.Context) *AppEmailTemplate {
	v, err := aetc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aetc *AppEmailTemplateCreate) Exec(ctx context.Context) error {
	_, err := aetc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aetc *AppEmailTemplateCreate) ExecX(ctx context.Context) {
	if err := aetc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aetc *AppEmailTemplateCreate) defaults() {
	if _, ok := aetc.mutation.CreateAt(); !ok {
		v := appemailtemplate.DefaultCreateAt()
		aetc.mutation.SetCreateAt(v)
	}
	if _, ok := aetc.mutation.UpdateAt(); !ok {
		v := appemailtemplate.DefaultUpdateAt()
		aetc.mutation.SetUpdateAt(v)
	}
	if _, ok := aetc.mutation.ID(); !ok {
		v := appemailtemplate.DefaultID()
		aetc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aetc *AppEmailTemplateCreate) check() error {
	if _, ok := aetc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppEmailTemplate.app_id"`)}
	}
	if _, ok := aetc.mutation.LangID(); !ok {
		return &ValidationError{Name: "lang_id", err: errors.New(`ent: missing required field "AppEmailTemplate.lang_id"`)}
	}
	if _, ok := aetc.mutation.Sender(); !ok {
		return &ValidationError{Name: "sender", err: errors.New(`ent: missing required field "AppEmailTemplate.sender"`)}
	}
	if _, ok := aetc.mutation.ReplyTo(); !ok {
		return &ValidationError{Name: "reply_to", err: errors.New(`ent: missing required field "AppEmailTemplate.reply_to"`)}
	}
	if _, ok := aetc.mutation.CcTo(); !ok {
		return &ValidationError{Name: "cc_to", err: errors.New(`ent: missing required field "AppEmailTemplate.cc_to"`)}
	}
	if _, ok := aetc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "AppEmailTemplate.subject"`)}
	}
	if _, ok := aetc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "AppEmailTemplate.body"`)}
	}
	if _, ok := aetc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "AppEmailTemplate.create_at"`)}
	}
	if _, ok := aetc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "AppEmailTemplate.update_at"`)}
	}
	return nil
}

func (aetc *AppEmailTemplateCreate) sqlSave(ctx context.Context) (*AppEmailTemplate, error) {
	_node, _spec := aetc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aetc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (aetc *AppEmailTemplateCreate) createSpec() (*AppEmailTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &AppEmailTemplate{config: aetc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: appemailtemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appemailtemplate.FieldID,
			},
		}
	)
	_spec.OnConflict = aetc.conflict
	if id, ok := aetc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := aetc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appemailtemplate.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := aetc.mutation.LangID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appemailtemplate.FieldLangID,
		})
		_node.LangID = value
	}
	if value, ok := aetc.mutation.Sender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldSender,
		})
		_node.Sender = value
	}
	if value, ok := aetc.mutation.ReplyTo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldReplyTo,
		})
		_node.ReplyTo = value
	}
	if value, ok := aetc.mutation.CcTo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldCcTo,
		})
		_node.CcTo = value
	}
	if value, ok := aetc.mutation.Subject(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldSubject,
		})
		_node.Subject = value
	}
	if value, ok := aetc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appemailtemplate.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := aetc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := aetc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appemailtemplate.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppEmailTemplate.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppEmailTemplateUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aetc *AppEmailTemplateCreate) OnConflict(opts ...sql.ConflictOption) *AppEmailTemplateUpsertOne {
	aetc.conflict = opts
	return &AppEmailTemplateUpsertOne{
		create: aetc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppEmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aetc *AppEmailTemplateCreate) OnConflictColumns(columns ...string) *AppEmailTemplateUpsertOne {
	aetc.conflict = append(aetc.conflict, sql.ConflictColumns(columns...))
	return &AppEmailTemplateUpsertOne{
		create: aetc,
	}
}

type (
	// AppEmailTemplateUpsertOne is the builder for "upsert"-ing
	//  one AppEmailTemplate node.
	AppEmailTemplateUpsertOne struct {
		create *AppEmailTemplateCreate
	}

	// AppEmailTemplateUpsert is the "OnConflict" setter.
	AppEmailTemplateUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *AppEmailTemplateUpsert) SetAppID(v uuid.UUID) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateAppID() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldAppID)
	return u
}

// SetLangID sets the "lang_id" field.
func (u *AppEmailTemplateUpsert) SetLangID(v uuid.UUID) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldLangID, v)
	return u
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateLangID() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldLangID)
	return u
}

// SetSender sets the "sender" field.
func (u *AppEmailTemplateUpsert) SetSender(v string) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldSender, v)
	return u
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateSender() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldSender)
	return u
}

// SetReplyTo sets the "reply_to" field.
func (u *AppEmailTemplateUpsert) SetReplyTo(v string) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldReplyTo, v)
	return u
}

// UpdateReplyTo sets the "reply_to" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateReplyTo() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldReplyTo)
	return u
}

// SetCcTo sets the "cc_to" field.
func (u *AppEmailTemplateUpsert) SetCcTo(v string) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldCcTo, v)
	return u
}

// UpdateCcTo sets the "cc_to" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateCcTo() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldCcTo)
	return u
}

// SetSubject sets the "subject" field.
func (u *AppEmailTemplateUpsert) SetSubject(v string) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldSubject, v)
	return u
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateSubject() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldSubject)
	return u
}

// SetBody sets the "body" field.
func (u *AppEmailTemplateUpsert) SetBody(v string) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateBody() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldBody)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *AppEmailTemplateUpsert) SetCreateAt(v uint32) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateCreateAt() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldCreateAt)
	return u
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppEmailTemplateUpsert) AddCreateAt(v uint32) *AppEmailTemplateUpsert {
	u.Add(appemailtemplate.FieldCreateAt, v)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *AppEmailTemplateUpsert) SetUpdateAt(v uint32) *AppEmailTemplateUpsert {
	u.Set(appemailtemplate.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppEmailTemplateUpsert) UpdateUpdateAt() *AppEmailTemplateUpsert {
	u.SetExcluded(appemailtemplate.FieldUpdateAt)
	return u
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppEmailTemplateUpsert) AddUpdateAt(v uint32) *AppEmailTemplateUpsert {
	u.Add(appemailtemplate.FieldUpdateAt, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppEmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appemailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppEmailTemplateUpsertOne) UpdateNewValues() *AppEmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appemailtemplate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.AppEmailTemplate.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *AppEmailTemplateUpsertOne) Ignore() *AppEmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppEmailTemplateUpsertOne) DoNothing() *AppEmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppEmailTemplateCreate.OnConflict
// documentation for more info.
func (u *AppEmailTemplateUpsertOne) Update(set func(*AppEmailTemplateUpsert)) *AppEmailTemplateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppEmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppEmailTemplateUpsertOne) SetAppID(v uuid.UUID) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateAppID() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *AppEmailTemplateUpsertOne) SetLangID(v uuid.UUID) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateLangID() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetSender sets the "sender" field.
func (u *AppEmailTemplateUpsertOne) SetSender(v string) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateSender() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateSender()
	})
}

// SetReplyTo sets the "reply_to" field.
func (u *AppEmailTemplateUpsertOne) SetReplyTo(v string) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetReplyTo(v)
	})
}

// UpdateReplyTo sets the "reply_to" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateReplyTo() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateReplyTo()
	})
}

// SetCcTo sets the "cc_to" field.
func (u *AppEmailTemplateUpsertOne) SetCcTo(v string) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetCcTo(v)
	})
}

// UpdateCcTo sets the "cc_to" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateCcTo() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateCcTo()
	})
}

// SetSubject sets the "subject" field.
func (u *AppEmailTemplateUpsertOne) SetSubject(v string) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateSubject() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetBody sets the "body" field.
func (u *AppEmailTemplateUpsertOne) SetBody(v string) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateBody() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateBody()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppEmailTemplateUpsertOne) SetCreateAt(v uint32) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppEmailTemplateUpsertOne) AddCreateAt(v uint32) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateCreateAt() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppEmailTemplateUpsertOne) SetUpdateAt(v uint32) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppEmailTemplateUpsertOne) AddUpdateAt(v uint32) *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertOne) UpdateUpdateAt() *AppEmailTemplateUpsertOne {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *AppEmailTemplateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppEmailTemplateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppEmailTemplateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppEmailTemplateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppEmailTemplateUpsertOne.ID is not supported by MySQL driver. Use AppEmailTemplateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppEmailTemplateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppEmailTemplateCreateBulk is the builder for creating many AppEmailTemplate entities in bulk.
type AppEmailTemplateCreateBulk struct {
	config
	builders []*AppEmailTemplateCreate
	conflict []sql.ConflictOption
}

// Save creates the AppEmailTemplate entities in the database.
func (aetcb *AppEmailTemplateCreateBulk) Save(ctx context.Context) ([]*AppEmailTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aetcb.builders))
	nodes := make([]*AppEmailTemplate, len(aetcb.builders))
	mutators := make([]Mutator, len(aetcb.builders))
	for i := range aetcb.builders {
		func(i int, root context.Context) {
			builder := aetcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppEmailTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aetcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aetcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aetcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aetcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aetcb *AppEmailTemplateCreateBulk) SaveX(ctx context.Context) []*AppEmailTemplate {
	v, err := aetcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aetcb *AppEmailTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := aetcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aetcb *AppEmailTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := aetcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppEmailTemplate.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppEmailTemplateUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (aetcb *AppEmailTemplateCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppEmailTemplateUpsertBulk {
	aetcb.conflict = opts
	return &AppEmailTemplateUpsertBulk{
		create: aetcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppEmailTemplate.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (aetcb *AppEmailTemplateCreateBulk) OnConflictColumns(columns ...string) *AppEmailTemplateUpsertBulk {
	aetcb.conflict = append(aetcb.conflict, sql.ConflictColumns(columns...))
	return &AppEmailTemplateUpsertBulk{
		create: aetcb,
	}
}

// AppEmailTemplateUpsertBulk is the builder for "upsert"-ing
// a bulk of AppEmailTemplate nodes.
type AppEmailTemplateUpsertBulk struct {
	create *AppEmailTemplateCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppEmailTemplate.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appemailtemplate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *AppEmailTemplateUpsertBulk) UpdateNewValues() *AppEmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appemailtemplate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppEmailTemplate.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *AppEmailTemplateUpsertBulk) Ignore() *AppEmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppEmailTemplateUpsertBulk) DoNothing() *AppEmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppEmailTemplateCreateBulk.OnConflict
// documentation for more info.
func (u *AppEmailTemplateUpsertBulk) Update(set func(*AppEmailTemplateUpsert)) *AppEmailTemplateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppEmailTemplateUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppEmailTemplateUpsertBulk) SetAppID(v uuid.UUID) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateAppID() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateAppID()
	})
}

// SetLangID sets the "lang_id" field.
func (u *AppEmailTemplateUpsertBulk) SetLangID(v uuid.UUID) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetLangID(v)
	})
}

// UpdateLangID sets the "lang_id" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateLangID() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateLangID()
	})
}

// SetSender sets the "sender" field.
func (u *AppEmailTemplateUpsertBulk) SetSender(v string) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetSender(v)
	})
}

// UpdateSender sets the "sender" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateSender() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateSender()
	})
}

// SetReplyTo sets the "reply_to" field.
func (u *AppEmailTemplateUpsertBulk) SetReplyTo(v string) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetReplyTo(v)
	})
}

// UpdateReplyTo sets the "reply_to" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateReplyTo() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateReplyTo()
	})
}

// SetCcTo sets the "cc_to" field.
func (u *AppEmailTemplateUpsertBulk) SetCcTo(v string) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetCcTo(v)
	})
}

// UpdateCcTo sets the "cc_to" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateCcTo() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateCcTo()
	})
}

// SetSubject sets the "subject" field.
func (u *AppEmailTemplateUpsertBulk) SetSubject(v string) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetSubject(v)
	})
}

// UpdateSubject sets the "subject" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateSubject() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateSubject()
	})
}

// SetBody sets the "body" field.
func (u *AppEmailTemplateUpsertBulk) SetBody(v string) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateBody() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateBody()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *AppEmailTemplateUpsertBulk) SetCreateAt(v uint32) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetCreateAt(v)
	})
}

// AddCreateAt adds v to the "create_at" field.
func (u *AppEmailTemplateUpsertBulk) AddCreateAt(v uint32) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.AddCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateCreateAt() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *AppEmailTemplateUpsertBulk) SetUpdateAt(v uint32) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.SetUpdateAt(v)
	})
}

// AddUpdateAt adds v to the "update_at" field.
func (u *AppEmailTemplateUpsertBulk) AddUpdateAt(v uint32) *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.AddUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *AppEmailTemplateUpsertBulk) UpdateUpdateAt() *AppEmailTemplateUpsertBulk {
	return u.Update(func(s *AppEmailTemplateUpsert) {
		s.UpdateUpdateAt()
	})
}

// Exec executes the query.
func (u *AppEmailTemplateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppEmailTemplateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppEmailTemplateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppEmailTemplateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
