// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/appuseremailtemplate"
	"github.com/google/uuid"
)

// AppUserEmailTemplate is the model entity for the AppUserEmailTemplate schema.
type AppUserEmailTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID uuid.UUID `json:"app_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// LangID holds the value of the "lang_id" field.
	LangID uuid.UUID `json:"lang_id,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Sender holds the value of the "sender" field.
	Sender string `json:"sender,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	CreateAt uint32 `json:"create_at,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	UpdateAt uint32 `json:"update_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUserEmailTemplate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuseremailtemplate.FieldCreateAt, appuseremailtemplate.FieldUpdateAt:
			values[i] = new(sql.NullInt64)
		case appuseremailtemplate.FieldSubject, appuseremailtemplate.FieldBody, appuseremailtemplate.FieldSender:
			values[i] = new(sql.NullString)
		case appuseremailtemplate.FieldID, appuseremailtemplate.FieldAppID, appuseremailtemplate.FieldUserID, appuseremailtemplate.FieldLangID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppUserEmailTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUserEmailTemplate fields.
func (auet *AppUserEmailTemplate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuseremailtemplate.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				auet.ID = *value
			}
		case appuseremailtemplate.FieldAppID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value != nil {
				auet.AppID = *value
			}
		case appuseremailtemplate.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				auet.UserID = *value
			}
		case appuseremailtemplate.FieldLangID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field lang_id", values[i])
			} else if value != nil {
				auet.LangID = *value
			}
		case appuseremailtemplate.FieldSubject:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subject", values[i])
			} else if value.Valid {
				auet.Subject = value.String
			}
		case appuseremailtemplate.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				auet.Body = value.String
			}
		case appuseremailtemplate.FieldSender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender", values[i])
			} else if value.Valid {
				auet.Sender = value.String
			}
		case appuseremailtemplate.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				auet.CreateAt = uint32(value.Int64)
			}
		case appuseremailtemplate.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				auet.UpdateAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AppUserEmailTemplate.
// Note that you need to call AppUserEmailTemplate.Unwrap() before calling this method if this AppUserEmailTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (auet *AppUserEmailTemplate) Update() *AppUserEmailTemplateUpdateOne {
	return (&AppUserEmailTemplateClient{config: auet.config}).UpdateOne(auet)
}

// Unwrap unwraps the AppUserEmailTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (auet *AppUserEmailTemplate) Unwrap() *AppUserEmailTemplate {
	tx, ok := auet.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUserEmailTemplate is not a transactional entity")
	}
	auet.config.driver = tx.drv
	return auet
}

// String implements the fmt.Stringer.
func (auet *AppUserEmailTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("AppUserEmailTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v", auet.ID))
	builder.WriteString(", app_id=")
	builder.WriteString(fmt.Sprintf("%v", auet.AppID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", auet.UserID))
	builder.WriteString(", lang_id=")
	builder.WriteString(fmt.Sprintf("%v", auet.LangID))
	builder.WriteString(", subject=")
	builder.WriteString(auet.Subject)
	builder.WriteString(", body=")
	builder.WriteString(auet.Body)
	builder.WriteString(", sender=")
	builder.WriteString(auet.Sender)
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", auet.CreateAt))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", auet.UpdateAt))
	builder.WriteByte(')')
	return builder.String()
}

// AppUserEmailTemplates is a parsable slice of AppUserEmailTemplate.
type AppUserEmailTemplates []*AppUserEmailTemplate

func (auet AppUserEmailTemplates) config(cfg config) {
	for _i := range auet {
		auet[_i].config = cfg
	}
}
