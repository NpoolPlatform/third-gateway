// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/appuseremailtemplate"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/predicate"
	"github.com/google/uuid"
)

// AppUserEmailTemplateUpdate is the builder for updating AppUserEmailTemplate entities.
type AppUserEmailTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *AppUserEmailTemplateMutation
}

// Where appends a list predicates to the AppUserEmailTemplateUpdate builder.
func (auetu *AppUserEmailTemplateUpdate) Where(ps ...predicate.AppUserEmailTemplate) *AppUserEmailTemplateUpdate {
	auetu.mutation.Where(ps...)
	return auetu
}

// SetAppID sets the "app_id" field.
func (auetu *AppUserEmailTemplateUpdate) SetAppID(u uuid.UUID) *AppUserEmailTemplateUpdate {
	auetu.mutation.SetAppID(u)
	return auetu
}

// SetUserID sets the "user_id" field.
func (auetu *AppUserEmailTemplateUpdate) SetUserID(u uuid.UUID) *AppUserEmailTemplateUpdate {
	auetu.mutation.SetUserID(u)
	return auetu
}

// SetLangID sets the "lang_id" field.
func (auetu *AppUserEmailTemplateUpdate) SetLangID(u uuid.UUID) *AppUserEmailTemplateUpdate {
	auetu.mutation.SetLangID(u)
	return auetu
}

// SetSubject sets the "subject" field.
func (auetu *AppUserEmailTemplateUpdate) SetSubject(s string) *AppUserEmailTemplateUpdate {
	auetu.mutation.SetSubject(s)
	return auetu
}

// SetBody sets the "body" field.
func (auetu *AppUserEmailTemplateUpdate) SetBody(s string) *AppUserEmailTemplateUpdate {
	auetu.mutation.SetBody(s)
	return auetu
}

// SetSender sets the "sender" field.
func (auetu *AppUserEmailTemplateUpdate) SetSender(s string) *AppUserEmailTemplateUpdate {
	auetu.mutation.SetSender(s)
	return auetu
}

// SetCreateAt sets the "create_at" field.
func (auetu *AppUserEmailTemplateUpdate) SetCreateAt(u uint32) *AppUserEmailTemplateUpdate {
	auetu.mutation.ResetCreateAt()
	auetu.mutation.SetCreateAt(u)
	return auetu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (auetu *AppUserEmailTemplateUpdate) SetNillableCreateAt(u *uint32) *AppUserEmailTemplateUpdate {
	if u != nil {
		auetu.SetCreateAt(*u)
	}
	return auetu
}

// AddCreateAt adds u to the "create_at" field.
func (auetu *AppUserEmailTemplateUpdate) AddCreateAt(u int32) *AppUserEmailTemplateUpdate {
	auetu.mutation.AddCreateAt(u)
	return auetu
}

// SetUpdateAt sets the "update_at" field.
func (auetu *AppUserEmailTemplateUpdate) SetUpdateAt(u uint32) *AppUserEmailTemplateUpdate {
	auetu.mutation.ResetUpdateAt()
	auetu.mutation.SetUpdateAt(u)
	return auetu
}

// AddUpdateAt adds u to the "update_at" field.
func (auetu *AppUserEmailTemplateUpdate) AddUpdateAt(u int32) *AppUserEmailTemplateUpdate {
	auetu.mutation.AddUpdateAt(u)
	return auetu
}

// Mutation returns the AppUserEmailTemplateMutation object of the builder.
func (auetu *AppUserEmailTemplateUpdate) Mutation() *AppUserEmailTemplateMutation {
	return auetu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auetu *AppUserEmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	auetu.defaults()
	if len(auetu.hooks) == 0 {
		affected, err = auetu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserEmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auetu.mutation = mutation
			affected, err = auetu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(auetu.hooks) - 1; i >= 0; i-- {
			if auetu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auetu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auetu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (auetu *AppUserEmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := auetu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auetu *AppUserEmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := auetu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auetu *AppUserEmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := auetu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auetu *AppUserEmailTemplateUpdate) defaults() {
	if _, ok := auetu.mutation.UpdateAt(); !ok {
		v := appuseremailtemplate.UpdateDefaultUpdateAt()
		auetu.mutation.SetUpdateAt(v)
	}
}

func (auetu *AppUserEmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuseremailtemplate.Table,
			Columns: appuseremailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuseremailtemplate.FieldID,
			},
		},
	}
	if ps := auetu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auetu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuseremailtemplate.FieldAppID,
		})
	}
	if value, ok := auetu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuseremailtemplate.FieldUserID,
		})
	}
	if value, ok := auetu.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuseremailtemplate.FieldLangID,
		})
	}
	if value, ok := auetu.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuseremailtemplate.FieldSubject,
		})
	}
	if value, ok := auetu.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuseremailtemplate.FieldBody,
		})
	}
	if value, ok := auetu.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuseremailtemplate.FieldSender,
		})
	}
	if value, ok := auetu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldCreateAt,
		})
	}
	if value, ok := auetu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldCreateAt,
		})
	}
	if value, ok := auetu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldUpdateAt,
		})
	}
	if value, ok := auetu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldUpdateAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, auetu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuseremailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// AppUserEmailTemplateUpdateOne is the builder for updating a single AppUserEmailTemplate entity.
type AppUserEmailTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AppUserEmailTemplateMutation
}

// SetAppID sets the "app_id" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetAppID(u uuid.UUID) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.SetAppID(u)
	return auetuo
}

// SetUserID sets the "user_id" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetUserID(u uuid.UUID) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.SetUserID(u)
	return auetuo
}

// SetLangID sets the "lang_id" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetLangID(u uuid.UUID) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.SetLangID(u)
	return auetuo
}

// SetSubject sets the "subject" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetSubject(s string) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.SetSubject(s)
	return auetuo
}

// SetBody sets the "body" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetBody(s string) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.SetBody(s)
	return auetuo
}

// SetSender sets the "sender" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetSender(s string) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.SetSender(s)
	return auetuo
}

// SetCreateAt sets the "create_at" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetCreateAt(u uint32) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.ResetCreateAt()
	auetuo.mutation.SetCreateAt(u)
	return auetuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (auetuo *AppUserEmailTemplateUpdateOne) SetNillableCreateAt(u *uint32) *AppUserEmailTemplateUpdateOne {
	if u != nil {
		auetuo.SetCreateAt(*u)
	}
	return auetuo
}

// AddCreateAt adds u to the "create_at" field.
func (auetuo *AppUserEmailTemplateUpdateOne) AddCreateAt(u int32) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.AddCreateAt(u)
	return auetuo
}

// SetUpdateAt sets the "update_at" field.
func (auetuo *AppUserEmailTemplateUpdateOne) SetUpdateAt(u uint32) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.ResetUpdateAt()
	auetuo.mutation.SetUpdateAt(u)
	return auetuo
}

// AddUpdateAt adds u to the "update_at" field.
func (auetuo *AppUserEmailTemplateUpdateOne) AddUpdateAt(u int32) *AppUserEmailTemplateUpdateOne {
	auetuo.mutation.AddUpdateAt(u)
	return auetuo
}

// Mutation returns the AppUserEmailTemplateMutation object of the builder.
func (auetuo *AppUserEmailTemplateUpdateOne) Mutation() *AppUserEmailTemplateMutation {
	return auetuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auetuo *AppUserEmailTemplateUpdateOne) Select(field string, fields ...string) *AppUserEmailTemplateUpdateOne {
	auetuo.fields = append([]string{field}, fields...)
	return auetuo
}

// Save executes the query and returns the updated AppUserEmailTemplate entity.
func (auetuo *AppUserEmailTemplateUpdateOne) Save(ctx context.Context) (*AppUserEmailTemplate, error) {
	var (
		err  error
		node *AppUserEmailTemplate
	)
	auetuo.defaults()
	if len(auetuo.hooks) == 0 {
		node, err = auetuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppUserEmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auetuo.mutation = mutation
			node, err = auetuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auetuo.hooks) - 1; i >= 0; i-- {
			if auetuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auetuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auetuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auetuo *AppUserEmailTemplateUpdateOne) SaveX(ctx context.Context) *AppUserEmailTemplate {
	node, err := auetuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auetuo *AppUserEmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := auetuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auetuo *AppUserEmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := auetuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auetuo *AppUserEmailTemplateUpdateOne) defaults() {
	if _, ok := auetuo.mutation.UpdateAt(); !ok {
		v := appuseremailtemplate.UpdateDefaultUpdateAt()
		auetuo.mutation.SetUpdateAt(v)
	}
}

func (auetuo *AppUserEmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *AppUserEmailTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appuseremailtemplate.Table,
			Columns: appuseremailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: appuseremailtemplate.FieldID,
			},
		},
	}
	id, ok := auetuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppUserEmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auetuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuseremailtemplate.FieldID)
		for _, f := range fields {
			if !appuseremailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuseremailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auetuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auetuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuseremailtemplate.FieldAppID,
		})
	}
	if value, ok := auetuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuseremailtemplate.FieldUserID,
		})
	}
	if value, ok := auetuo.mutation.LangID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: appuseremailtemplate.FieldLangID,
		})
	}
	if value, ok := auetuo.mutation.Subject(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuseremailtemplate.FieldSubject,
		})
	}
	if value, ok := auetuo.mutation.Body(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuseremailtemplate.FieldBody,
		})
	}
	if value, ok := auetuo.mutation.Sender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appuseremailtemplate.FieldSender,
		})
	}
	if value, ok := auetuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldCreateAt,
		})
	}
	if value, ok := auetuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldCreateAt,
		})
	}
	if value, ok := auetuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldUpdateAt,
		})
	}
	if value, ok := auetuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: appuseremailtemplate.FieldUpdateAt,
		})
	}
	_node = &AppUserEmailTemplate{config: auetuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auetuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuseremailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
