// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/emailtemplate"
	"github.com/NpoolPlatform/third-gateway/pkg/db/ent/predicate"
)

// EmailTemplateUpdate is the builder for updating EmailTemplate entities.
type EmailTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// Where appends a list predicates to the EmailTemplateUpdate builder.
func (etu *EmailTemplateUpdate) Where(ps ...predicate.EmailTemplate) *EmailTemplateUpdate {
	etu.mutation.Where(ps...)
	return etu
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etu *EmailTemplateUpdate) Mutation() *EmailTemplateMutation {
	return etu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (etu *EmailTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(etu.hooks) == 0 {
		affected, err = etu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			etu.mutation = mutation
			affected, err = etu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(etu.hooks) - 1; i >= 0; i-- {
			if etu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (etu *EmailTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := etu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (etu *EmailTemplateUpdate) Exec(ctx context.Context) error {
	_, err := etu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etu *EmailTemplateUpdate) ExecX(ctx context.Context) {
	if err := etu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (etu *EmailTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: emailtemplate.FieldID,
			},
		},
	}
	if ps := etu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, etu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EmailTemplateUpdateOne is the builder for updating a single EmailTemplate entity.
type EmailTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailTemplateMutation
}

// Mutation returns the EmailTemplateMutation object of the builder.
func (etuo *EmailTemplateUpdateOne) Mutation() *EmailTemplateMutation {
	return etuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (etuo *EmailTemplateUpdateOne) Select(field string, fields ...string) *EmailTemplateUpdateOne {
	etuo.fields = append([]string{field}, fields...)
	return etuo
}

// Save executes the query and returns the updated EmailTemplate entity.
func (etuo *EmailTemplateUpdateOne) Save(ctx context.Context) (*EmailTemplate, error) {
	var (
		err  error
		node *EmailTemplate
	)
	if len(etuo.hooks) == 0 {
		node, err = etuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmailTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			etuo.mutation = mutation
			node, err = etuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(etuo.hooks) - 1; i >= 0; i-- {
			if etuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = etuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, etuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) SaveX(ctx context.Context) *EmailTemplate {
	node, err := etuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (etuo *EmailTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := etuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etuo *EmailTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := etuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (etuo *EmailTemplateUpdateOne) sqlSave(ctx context.Context) (_node *EmailTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emailtemplate.Table,
			Columns: emailtemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: emailtemplate.FieldID,
			},
		},
	}
	id, ok := etuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EmailTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := etuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailtemplate.FieldID)
		for _, f := range fields {
			if !emailtemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != emailtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := etuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &EmailTemplate{config: etuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, etuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailtemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
